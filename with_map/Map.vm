function Map.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 200
call Array.new 1
pop this 0
push constant 0
pop this 1
push pointer 0
return
function Map.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Map.set 0
push argument 0
pop pointer 0
push argument 1
push constant 10
call Math.multiply 2
push argument 2
add
push this 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Map.reset 0
push argument 0
pop pointer 0
push argument 1
push constant 10
call Math.multiply 2
push argument 2
add
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Map.SET 0
push argument 0
pop pointer 0
push argument 1
push constant 10
call Math.multiply 2
push argument 2
add
push this 0
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Map.read 1
push argument 0
pop pointer 0
push argument 1
push constant 10
call Math.multiply 2
push argument 2
add
push this 0
add
pop pointer 1
push that 0
pop local 0
push local 0
return
function Map.proc 6
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 19
pop local 1
label WHILE_EXP0
push local 1
push constant 0
gt
not
if-goto WHILE_END0
push constant 1
pop local 5
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push constant 10
lt
not
if-goto WHILE_END1
push local 5
push local 1
push constant 10
call Math.multiply 2
push local 2
add
push this 0
add
pop pointer 1
push that 0
and
pop local 5
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
label WHILE_EXP2
push local 5
push constant 1
eq
not
if-goto WHILE_END2
push local 0
push constant 1
add
pop local 0
push local 1
pop local 3
label WHILE_EXP3
push local 3
push constant 0
gt
not
if-goto WHILE_END3
push constant 0
pop local 4
label WHILE_EXP4
push local 4
push constant 10
lt
not
if-goto WHILE_END4
push local 3
push constant 10
call Math.multiply 2
push local 4
add
push this 0
add
push local 3
push constant 10
call Math.multiply 2
push local 4
add
push constant 10
sub
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP4
label WHILE_END4
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP3
label WHILE_END3
push constant 0
pop local 4
label WHILE_EXP5
push local 4
push constant 10
lt
not
if-goto WHILE_END5
push local 4
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP5
label WHILE_END5
push pointer 0
push local 1
call Map.RowIsFull 2
pop local 5
goto WHILE_EXP2
label WHILE_END2
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Map.RowIsFull 2
push argument 0
pop pointer 0
push argument 1
push constant 10
call Math.multiply 2
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push argument 1
push constant 1
add
push constant 10
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 1
push local 0
push this 0
add
pop pointer 1
push that 0
and
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Map.getHeight 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 200
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 10
call Math.divide 2
pop local 1
push constant 20
push local 1
sub
pop local 1
push local 1
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Map.dead 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 10
lt
not
if-goto WHILE_END0
push this 1
push local 0
push this 0
add
pop pointer 1
push that 0
or
pop this 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 1
return
function Map.printCells 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 200
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push local 0
call Map.pa 1
push constant 1
add
push constant 10
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call Output.println 0
pop temp 0
goto IF_END0
label IF_FALSE0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Map.pa 2
push argument 0
push constant 10
call Math.divide 2
pop local 0
push local 0
push constant 10
call Math.multiply 2
pop local 0
push argument 0
push local 0
sub
pop local 1
push local 1
return
function Map.clear 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 200
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop this 1
push constant 0
return
function Map.showMap 9
push argument 0
pop pointer 0
push constant 65
pop local 4
push constant 8
pop local 3
push constant 3
pop local 0
push constant 8
pop local 1
push constant 4
pop local 2
push argument 1
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 305
pop local 4
label IF_FALSE0
push local 4
push local 2
add
push local 0
add
pop local 7
push local 3
push local 2
add
push local 0
add
pop local 8
push constant 0
pop local 5
label WHILE_EXP0
push local 5
push constant 20
lt
not
if-goto WHILE_END0
push constant 0
pop local 6
label WHILE_EXP1
push local 6
push constant 10
lt
not
if-goto WHILE_END1
push local 5
push constant 10
call Math.multiply 2
push local 6
add
push this 0
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 7
push local 8
push local 7
push local 1
add
push local 8
push local 1
add
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE1
push local 5
push constant 10
call Math.multiply 2
push local 6
add
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
call Screen.setColor 1
pop temp 0
push local 7
push local 8
push local 7
push local 1
add
push local 8
push local 1
add
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE2
push local 7
push local 1
add
push local 0
add
pop local 7
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP1
label WHILE_END1
push local 4
push local 2
add
push local 0
add
pop local 7
push local 8
push local 1
add
push local 0
add
pop local 8
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
